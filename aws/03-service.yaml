---
AWSTemplateFormatVersion: '2010-09-09'

Description: Creates a service and task definition for the apps

Parameters:
  NetworkStackName:
    Type: String
  ClusterStackName:
    Type: String
  WebPort:
    Type: Number
    Default: 9000
  APIPort:
    Type: Number
    Default: 8000
  NetworkCIDR:
    Type: String
    Default: '10.11.0.0/16'

Resources:
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CloudWatch-Metrics-Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource:
                  - '*'
  EcsExecutionTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: 'web-app'
          Image: !ImportValue
            'Fn::Sub': '${ClusterStackName}-WebECRRepoURI'
          Cpu: 256
          PortMappings:
            - ContainerPort: !Ref WebPort
          MemoryReservation: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'WebLogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
              awslogs-datetime-format: '%Y-%m-%d %H:%M:%S'
          Environment:
            - Name: PORT
              Value: !Ref WebPort
            - Name: API_HOST
              Value: !Sub
                - "${uri}:80"
                - uri: !ImportValue
                    'Fn::Sub': '${ClusterStackName}-APIURL'

      Family: !Sub '${AWS::StackName}-web'
      TaskRoleArn: !Ref 'EcsTaskRole'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'EcsExecutionTaskRole'
      Cpu: 256
      Memory: 512

  APITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: 'api-app'
          Image: !ImportValue
            'Fn::Sub': '${ClusterStackName}-APIECRRepoURI'
          Cpu: 256
          PortMappings:
            - ContainerPort: !Ref APIPort
          MemoryReservation: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'APILogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
              awslogs-datetime-format: '%Y-%m-%d %H:%M:%S'
          Environment:
            - Name: PORT
              Value: !Ref APIPort
            - Name: DB
              Value: 'appdb'
            - Name: DBUSER
              Value: 'appmasteruser'
            - Name: DBPASS
              Value: 'password'
            - Name: DBHOST
              Value: !ImportValue
                'Fn::Sub': '${ClusterStackName}-EndpointAddress'
            - Name: DBPORT
              Value: 5432
      Family: !Sub '${AWS::StackName}-api'
      TaskRoleArn: !Ref 'EcsTaskRole'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'EcsExecutionTaskRole'
      Cpu: 256
      Memory: 512

  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebLogGroup
    Properties:
      ServiceName: 'web-svc'
      LaunchType: FARGATE
      TaskDefinition: !Ref 'WebTaskDefinition'
      DesiredCount: 2
      LoadBalancers:
        - TargetGroupArn: !ImportValue
            'Fn::Sub': '${ClusterStackName}-WebTargetGroup'
          ContainerPort: !Ref 'WebPort'
          ContainerName: 'web-app'
      Cluster: !ImportValue
        'Fn::Sub': '${ClusterStackName}-ClusterName'
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-A-SubID
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-B-SubID
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-C-SubID
          SecurityGroups:
            - !Ref 'WebSG'

  APIService:
    Type: AWS::ECS::Service
    DependsOn:
      - APILogGroup
    Properties:
      ServiceName: 'api-svc'
      LaunchType: FARGATE
      TaskDefinition: !Ref 'APITaskDefinition'
      DesiredCount: 2
      LoadBalancers:
        - TargetGroupArn: !ImportValue
            'Fn::Sub': '${ClusterStackName}-APITargetGroup'
          ContainerPort: !Ref 'APIPort'
          ContainerName: 'api-app'
      Cluster: !ImportValue
        'Fn::Sub': '${ClusterStackName}-ClusterName'
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-A-SubID
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-B-SubID
            - Fn::ImportValue:
                !Sub ${NetworkStackName}-Private-C-SubID
          SecurityGroups:
            - !Ref 'APISG'

  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-web-sg'
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref WebPort
          ToPort: !Ref WebPort
          CidrIp: !Ref NetworkCIDR
        - IpProtocol: tcp
          FromPort: !Ref WebPort
          ToPort: !Ref WebPort
          CidrIp: !Ref NetworkCIDR
        - IpProtocol: tcp
          FromPort: !Ref WebPort
          ToPort: !Ref WebPort
          CidrIp: !Ref NetworkCIDR

  APISG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-api-sg'
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref APIPort
          ToPort: !Ref APIPort
          CidrIp: !Ref NetworkCIDR
        - IpProtocol: tcp
          FromPort: !Ref APIPort
          ToPort: !Ref APIPort
          CidrIp: !Ref NetworkCIDR
        - IpProtocol: tcp
          FromPort: !Ref APIPort
          ToPort: !Ref APIPort
          CidrIp: !Ref NetworkCIDR

  WebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub '${AWS::StackName}-web'

  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub '${AWS::StackName}-api'

  EcsAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  WebScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub 'service/${ClusterStackName}/${WebService.Name}'
      RoleARN: !GetAtt 'EcsAutoScaleRole.Arn'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  APIScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub 'service/${ClusterStackName}/${APIService.Name}'
      RoleARN: !GetAtt 'EcsAutoScaleRole.Arn'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  
  WebScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${WebService.Name}-ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'WebScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 1

  WebScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${WebService.Name}-ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'WebScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: -10
            MetricIntervalUpperBound: 0
            ScalingAdjustment: -10
          - MetricIntervalUpperBound: -10
            ScalingAdjustment: -30

  WebCpuUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for high cpu usage
      AlarmActions:
        - !Ref 'WebScaleUpPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            'Fn::Sub': '${ClusterStackName}-ClusterName'
        - Name: ServiceName
          Value: !GetAtt 'WebService.Name'

  WebCpuUtilAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for low cpu usage
      AlarmActions:
        - !Ref 'WebScaleDownPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            'Fn::Sub': '${ClusterStackName}-ClusterName'
        - Name: ServiceName
          Value: !GetAtt 'WebService.Name'
  
  APIScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${APIService.Name}-ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'APIScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 1

  APIScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${APIService.Name}-ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'APIScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: -10
            MetricIntervalUpperBound: 0
            ScalingAdjustment: -10
          - MetricIntervalUpperBound: -10
            ScalingAdjustment: -30

  APICpuUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for high cpu usage
      AlarmActions:
        - !Ref 'APIScaleUpPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            'Fn::Sub': '${ClusterStackName}-ClusterName'
        - Name: ServiceName
          Value: !GetAtt 'APIService.Name'

  APICpuUtilAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for low cpu usage
      AlarmActions:
        - !Ref 'APIScaleDownPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            'Fn::Sub': '${ClusterStackName}-ClusterName'
        - Name: ServiceName
          Value: !GetAtt 'APIService.Name'

Outputs:
  WebService:
    Description: Name of the Web Service
    Value: !GetAtt WebService.Name
    Export:
      Name: !Sub '${AWS::StackName}-WebService'
  APIService:
    Description: Name of the API Service
    Value: !GetAtt APIService.Name
    Export:
      Name: !Sub '${AWS::StackName}-APIService'
