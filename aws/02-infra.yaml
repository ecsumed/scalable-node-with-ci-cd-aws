---
Description:
  "Create any supporting infra: s3, rds, etc..."

Parameters:
  NetworkStackName:
    Type: String
    Description: Name of the Network Stack that was used.
  DBMasterPass:
    Type: String
    Description: Initial db password
    NoEcho: true
  DBMasterUser:
    Type: String
    Description: Initial db user
  DBName:
    Type: String
    Description: Initial db name
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  PostgresSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName} Postgres Access'
      GroupDescription: Security Group which grants access to Postgres
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5435
          CidrIp: 10.11.0.0/24

  PostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Database subnet group for ${AWS::StackName}'
      SubnetIds:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-C-SubID'

  Postgres:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref PostgresSubnetGroup
      Engine: postgres
      EngineVersion: 13.4
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPass
      DBName: !Ref DBName
      DBInstanceClass: db.m5.large
      BackupRetentionPeriod: 1
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref PostgresSG
      PubliclyAccessible: false

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns: [
        'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      ]
      Policies:
      - PolicyName: ECS-CloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ['logs:CreateLogStream', 'logs:PutLogEvents',
              'logs:DescribeLogStreams']
            Resource: ['arn:aws:logs:*:*:*']

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'InstanceRole']

  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups: [!Ref 'WebLoadBalancerSG']
      Subnets:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-C-SubID'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'

  WebLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from
        the internet
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

  WebFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - !GetAtt
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
        - AvailabilityZone
      VPCZoneIdentifier:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
      LaunchConfigurationName: !Ref 'WebFleetLaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: 1
      LoadBalancerNames: [!Ref 'WebLoadBalancer']

  WebFleetLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LatestAmiId
      SecurityGroups: [!Ref 'WebFleetSG']
      IamInstanceProfile:
        !Ref InstanceProfile
      InstanceType: t2.micro
      KeyName: 'KeyName'
      UserData:
        Fn::Base64: !Sub |
           yum install -y vim
           
  WebFleetSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and bastion as well as outbound
        HTTP and HTTPS traffic
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !Ref 'WebLoadBalancerSG'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  
  APILoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups: [!Ref 'APILoadBalancerSG']
      Subnets:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-C-SubID'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'

  APILoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from
        the internet
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

  APIFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - !GetAtt
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
        - AvailabilityZone
      VPCZoneIdentifier:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
      LaunchConfigurationName: !Ref 'APIFleetLaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: 1
      LoadBalancerNames: [!Ref 'APILoadBalancer']

  APIFleetLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile:
        !Ref InstanceProfile
      ImageId: !Ref LatestAmiId
      SecurityGroups: [!Ref 'APIFleetSG']
      InstanceType: t2.micro
      KeyName: 'KeyName'
      UserData:
        Fn::Base64: !Sub |
           yum install -y vim
           
  APIFleetSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and bastion as well as outbound
        HTTP and HTTPS traffic
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !Ref 'APILoadBalancerSG'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

Outputs:
  EndpointAddress:
    Description: Connection endpoint of the database
    Value: !GetAtt Postgres.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-EndpointAddress'
  EndpointPort:
    Description: Connection port of the database
    Value: !GetAtt Postgres.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-EndpointPort'
  DbInstanceIdentifier:
    Description: The Database Instance Identifier
    Value: !Ref Postgres
    Export:
      Name: !Sub '${AWS::StackName}-DbInstanceIdentifier'
  DatabaseName:
    Description: The Database Instance Identifier
    Value: !Ref DBName
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseName'
  MasterUserName:
    Description: The master user name
    Value: !Ref DBMasterPass
    Export:
      Name: !Sub '${AWS::StackName}-MasterUserName'
  WebURL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [WebLoadBalancer, DNSName]]]
