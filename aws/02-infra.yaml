---
Description:
  "Create any supporting infra: s3, rds, etc..."

Parameters:
  NetworkStackName:
    Type: String
    Description: Name of the Network Stack that was used.
  DBMasterPass:
    Type: String
    Description: Initial db password
    NoEcho: true
  DBMasterUser:
    Type: String
    Description: Initial db user
  DBName:
    Type: String
    Description: Initial db name

Resources:
  PostgresSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName} Postgres Access'
      GroupDescription: Security Group which grants access to Postgres
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5435
          CidrIp: 10.11.0.0/24

  PostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Database subnet group for ${AWS::StackName}'
      SubnetIds:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Private-C-SubID'

  Postgres:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref PostgresSubnetGroup
      Engine: postgres
      EngineVersion: 13.4
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPass
      DBName: !Ref DBName
      DBInstanceClass: db.m5.large
      BackupRetentionPeriod: 1
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref PostgresSG
      PubliclyAccessible: false
  
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for load balancers which need to route traffic
        to container instances
      VpcId: !ImportValue
             'Fn::Sub': '${NetworkStackName}-VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub 'Load Balancer SG - ${AWS::StackName}'

  WebLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-C-SubID'
      SecurityGroups: [!Ref 'LoadBalancerSecurityGroup']
  
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue
             'Fn::Sub': '${NetworkStackName}-VpcId'
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
  
  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'WebTargetGroup'
      LoadBalancerArn: !Ref 'WebLoadBalancer'
      Port: '80'
      Protocol: HTTP
  
  APILoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-A-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-B-SubID'
        - !ImportValue
          'Fn::Sub': '${NetworkStackName}-Public-C-SubID'
      SecurityGroups: [!Ref 'LoadBalancerSecurityGroup']
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue
             'Fn::Sub': '${NetworkStackName}-VpcId'
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4

  APIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'APITargetGroup'
      LoadBalancerArn: !Ref 'APILoadBalancer'
      Port: 80
      Protocol: HTTP

  WebECRRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "web-repo"

  APIECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "api-repo"

Outputs:
  EndpointAddress:
    Description: Connection endpoint of the database
    Value: !GetAtt Postgres.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-EndpointAddress'
  EndpointPort:
    Description: Connection port of the database
    Value: !GetAtt Postgres.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-EndpointPort'
  DbInstanceIdentifier:
    Description: The Database Instance Identifier
    Value: !Ref Postgres
    Export:
      Name: !Sub '${AWS::StackName}-DbInstanceIdentifier'
  DatabaseName:
    Description: The Database Instance Identifier
    Value: !Ref DBName
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseName'
  MasterUserName:
    Description: The master user name
    Value: !Ref DBMasterPass
    Export:
      Name: !Sub '${AWS::StackName}-MasterUserName'

  WebTargetGroup:
    Description: Target group of the web app
    Value: !Ref WebTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-WebTargetGroup'
  APITargetGroup:
    Description: Target group of the api app
    Value: !Ref APITargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-APITargetGroup'
  WebURL:
    Description: URL of the web app
    Value: !Join ['', ['http://', !GetAtt [WebLoadBalancer, DNSName]]]
  APIURL:
    Description: URL of the api app
    Value: !Join ['', ['http://', !GetAtt [APILoadBalancer, DNSName]]]

  WebECRRepoURI:
    Description: ECR repo of the web app
    Value: !GetAtt WebECRRepo.RepositoryUri
    Export:
      Name: !Sub '${AWS::StackName}-WebECRRepoURI'
  APIECRRepoURI:
    Description: ECR repo of the api app
    Value: !GetAtt APIECRRepo.RepositoryUri
    Export:
      Name: !Sub '${AWS::StackName}-APIECRRepoURI'
